
<?php

// ******** ВВЕДЕНИЕ В ЯЗЫК РНР ДЛЯ НОВИЧКОВ 1\20 ********// ✓

// установка web-server  



// ******** ВЫПОЛНЕНИЕ КОДА PHP 2\20 ********// ✓

// PHP-код пишем между строками HTML в <?php > или <? >
// РНР код исп. на сервере, в рез-тате сервер с пом. echo
// Выведет в браузер сгенер. HTML код, c соотв. прописаным сцен.


// ******** ПРОБЛЕМА С КОДИРОВКАМИ 3\20 ********// ✓

// кодировка в HTML должна быть utf-8
// и в РНР mb_internal_encoding('UTF-8'); 



// ******** ВЫВОД ОШИБОК PHP 4\20 ********// ✓

// notice  - замечания, код работает
// warning - предупреждение, код работает не так
// fatal   - код не работает

// Включаем ошибки: 
// error_reporting(E_ALL); 
// ini_set('display_errors', 'on');

// Выключаем ошибки:
// error_reporting(0);
// ini_set('display_errors', 'off');



// ******** ПОЛНЫЙ КОД ДЛЯ ЗАПУСКА PHP 5\20 ********// ✓

// error_reporting(E_ALL);
// ini_set('display_errors', 'on');
// mb_internal_encoding('UTF-8');

// echo 'моя 21я программа';



// ******** УЛУЧШЕННЫЙ КОД ДЛЯ ЗАПУСКА PHP 6\20 ********// ✓

// Созд. index.php для запуска в браузере:

// error_reporting(E_ALL);
// ini_set('display_errors', 'on');
// mb_internal_encoding('UTF-8');

// include 'page2.php';

// Созд. page2.php где будет просто код, для проверки преподом:

// echo 'hello';



// ******** ОБЗОР НАЧАЛЬНЫХ PHP КОМАНД 7\20 ********// ✓

// 	 echo - гл. конструкция РНР, которая в итоге и генерирует
//  HTML (выходя за рамки РНР-сценария).

// Выведем строку <?php echo 'hello'; или число <?php echo 123;>



// ******** КОММЕНТАРИИ В PHP 8\20 ********// ✓

// - однострочный
/* - многострочный */



// ******** КОММЕНТАРИИ В УЧЕБНИКЕ 9\20 ********// ✓

// строки выводим так: echo 'string';
// числа выводим так: echo 12345;



// ******** ФУНКЦИЯ VAR_DUMP В PHP 10\20 ********// ✓

// var_dump('12345');  // выведет тип данных и кол-во символов.



// ******** ФУНКЦИ В PHP 11\20 ******** // ✓

// Фу-ии - это действие (глагол) позволяющее  избегать дубл.
// кода. Записывая в фу-ю код, мы можем применять его, когда над.

// В кр. () скоб пишутся ПАРАМЕТРЫ фу-ии (по сути - переменные). 
// Когда фу-я записана. Дальше уже пишем только АРГУМЕНТЫ,
// Для формирования новых знач. который нам надо от этой фу-ии.



// ******** ПЕРЕМЕННЫЕ В PHP 12\20 ******** // ✓

// Переменная - ячейка памяти, для хранения результатов выраж-ий.
// Которые нам надо потом воспроизводить.

// В переменной, можем хранить строки, числа, массивы, итд.
// Должна сост. из лат. букв, перв. символ , не дол. быть цифрой.



// ****** ИСПОЛЬЗОВАНИЕ ПЕРЕМЕННЫХ В PHP В PHP 13\20 ****** // ✓

// $num = 123;
// echo $num; // выведет 123



// ****** ИЗМЕНЕНИЯ ЗНАЧЕНИЯ ПЕРЕМЕННЫХ В PHP 14\20 ****** // ✓

// В РНР у переменных можно переопределять значения:
// $a = 10;
// echo $a;   // Выведет 10
// $a = 20;
// echo $a;   // Выведет 20



// **** МАТЕМАТИЧЕСКИЕ ОПЕРАЦИИ С ЧИСЛАМИ В РНР 15\20 **** // ✓

// $a = 1 + 2;
// echo $a;     // Выведет 3

// $b = 3 - 2; 
// echo $b;     // Выведет 1

// и.т.д

// $a = 1 + 2 +3;
// echo $a;     // Выведет 6



// *** МАТЕМАТИЧЕСКИЕ ОПЕРАЦИИ С ПЕРЕМЕННЫМИ В PHP 16\20 ** // ✓

// $a = 2;
// $b = 3;
// echo $a + $b; либо $c = $a + $b; echo $c; // Выведет 5

// $a = 10;
// $b = 5;
// $c = $a - $b;
// $d = 7;
// $res = $c + $d;
// echo $res;       // Выведет 12



// **** ПРИОРИТЕТ МАТЕМАТИЧЕСКИХ ОПЕРАЦИЙ В РНР 17\20 **** // ✓

// Математические операции PHP имеют такой же приоритет
// как в обычной математике.
// То есть в начале выполняется умножение и деление
// а потом уже сложение и вычитание.



// ****** РАВНЫЙ ПРИОРИТЕТ В PHP 18\20 ****** // ✓

// Умножение и деление имеют равный приоритет 
// и выполняются по очереди слева направо.



// ****** ГРУППИРУЮЩИЕ СКОБКИ В PHP 19\20 ****** // ✓

// При желании вы можете указывать приоритет операций 
// с помощью круглых скобок.




// ****** НЮАНСЫ ГРУППИРОВКИ В PHP 20\20 ****** // ✓

// В скобки можно заключить операции, обладающие приоритетом 
// это не будет ошибкой. Например:
// $a = (8 / 2) * 4;

?>
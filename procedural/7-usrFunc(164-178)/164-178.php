<?php


/*ОСНОВЫ РАБОТЫ С ПОЛЬЗОВАТЕЛЬСКИМИ ФУНКЦИЯМИ В PHP 164/178*/ ✓

// в РНР как и везде, можем крафтить свои фу-ии.
// Создадим свою функцию:

// function myFunc() {
// 	echo 'Hello!';
// }

// Вызовем ее:
// myFunc();


// ДЗ (урок 164):

// №1
// Сделайте функцию, выводящую на экран ваше имя.
// function myFunc() {
// 	echo 'Hello!';
// }

// №2
// Сделайте функцию, выводящую на экран сумму чисел от 1 до 100
// function sum() {
// 	for ($num = 0, $i = 1; $i <= 100; $i++) {
// 		$num += $i;
// 	}
// 	echo $num;
// }
// sum();		// 5050



/***** ПАРАМЕТРЫ ФУНКЦИЙ В PHP 165/178 *****/ ✓

// function($num) - в скобках передаём параметры фу-ии.
// $num - это условная переменная. 
// В которую попадает число или строка.


// ДЗ (параметры функций):

// №1
// Сделайте функцию, которая параметром принимает число
// и выводит на экран куб этого числа.
// function myFunc($num) {
// 	echo $num * $num * $num;
// }
// myFunc(4);

// №2
// Сделайте функцию, которая параметром принимает число и 
// проверяет, положительное это число или отрицательное.
// В первом случае пусть функция выводит на экран "+++"
// А во втором "---"

// function checkNum($num) {
// 	if ($num >= 0) {
// 		echo '+++';
// 	} else {
// 		echo '---';
// 	}
// }
// checkNum(3);



/***** НЕСКОЛЬКО ПАРАМЕТРОВ ФУНКЦИЙ В PHP 166/178 *****/ ✓

// Функция может принимать не 1 параметр, а несколько.
// function myFunc($a, $b, $c) {
// 	echo $a / $b + $c;
// }
// myFunc(4, 2, 5);



/***** ПАРАМЕТРЫ-ПЕРЕМЕННЫЕ ФУНКЦИЙ В PHP 167/178 *****/ ✓

// В параметры функции, можно передавать не только числа.
// Но и переменные:
// $p1 = 1;
// $p2 = 2;
// $p3 = 3;
// function myFunc($a, $b, $c) {
// 	echo $a + $b + $c;
// }
// myFunc($p1, $p2, $p3);



/***** НЕОБЯЗАТЕЛЬНЫЕ ПАРАМЕТРЫ ФУНКЦИЙ В PHP 168/178 *****/ ✓

// Параметры фу-ии можно сделать не обязательными.
// Для этого им необходимо задать значения по умолчанию:

// function myFunc($num = 2) {
// 	echo $num ** 2;
// }
// myFunc();	// 4
// myFunc(3);	// 6
// т.е смысл не обязательных параметров, в том
// что они "отрабатывают", когда в аргументе пусто

// Аналогично работает с двумя параметрами:
// function myFunc($num = 1, $num1 = 3) {
// 	echo $num * $num1;
// }
// myFunc();		// 3
// myFunc(2);		// 6 - потому, что "2" заменит "$num"
// myFunc(3,3);		// 9



/***** ИНСТРУКЦИЯ RETURN В PHP 169/178 *****/ ✓

// return - готовый результат функции. 
// Который записывается на место вызова функции. 
// соотв. мы его (готовый рез-тат) можем присвоить перемен.

// function myFunc($a, $b) {
// 	$res = $a + $b;
// 	return $res; 			  // возвратил 6
// }
// $readyRes =  myFunc(3, 3); // 6 - подств. вместо myFunc(3,3)
// 
// echo $readyRes;			  // сохр. рез. подств. в перемен.
// $readyRes = $readyRes + 10;// можем изменять рез-тат (16)


// Еще способы манипуляции:
// $readyRes =  myFunc(3, 3) + myFunc(3, 5); 	// 14
// $readyRes =  myFunc(3, 3) + 4; 			  	// 10
// echo myFunc(3, 3);
// echo myFunc(3, 3) + myFunc(3, 3);


// ДЗ(Инструкция return в PHP):

// №1
// Сделайте функцию, которая параметром принимает число
// а возвращает куб этого числа. С помощью этой функции 
// найдите куб. числа 3 и запишите его в переменную $res.

// function cube($num) {
// 	$res = $num ** 3;
// 	return $res;
// }
// echo $res = cube(3); 	// $res за телом функции -
							// это другая перемен. $res!
							
							
// №2
// С помощью созданной вами функции найдите сумму кубов
// числа 2 и числа 3 и запишите ее в переменную $res.

// function cube($num) {
// 	$res = $num ** 3;
// 	return $res;
// }
// $res = cube(3) + cube(2);



/***** ПОСЛЕДОВАТЕЛЬНЫЙ ВЫЗОВ ФУНКЦИЙ В PHP 170/178 *****/ ✓

// Результат работы одной функции передать параметром в другую:
// function cvadrat($num) {
// 	return $num * $num;
// }
// $res = cvadrat(cvadrat(2));	// 16

// Функции не обязательно должны быть одинаковыми:
// function plusOne($num) {
// 	$res = $num + 1;
// 	return $res;
// }
// function cube($num) {
// 	$res = $num * $num;
// 	return $res;
// }

// получим из 2 число 5, с пом 2х наших функций:
// echo plusOne(cube(2));		// 5



/***** ТОНКОЕ МЕСТО RETURN В PHP 171/178 *****/ ✓

// После выполнения return. Фу-я удаляется из ОП.
// И дальше никакой код не выполняется:
// function func($num) {
// 	return $num * $num;
// 	echo '!'; 			   // не выполнится!
// } 
// echo $res = func(3);    // 9

// В фу-ии может быть и не один return
// Но выполнится только один из них:
// function MYfunc($num) {
// 	if ($num >= 0) {
// 		return '+';
// 	} else {
// 		return '-';
// 	}
// }
// echo MYfunc(3);   	// выведет '+';
// echo MYfunc(-3);  	// выведет '-';


// ДЗ(тонкое место return):
// №1
// Выведет 3, поскольку сразу отработал return
// №2
// 100 и 5 т.к один из return сработает только.
// №3
// 100 и 5 т.к один из return сработает только.



/***** ЦИКЛ И RETURN В PHP 172/178 *****/ ✓

// function func() {
// 	$sum = 0;
// 	for ($i = 1; $i <= 5; $i++) {
// 		$sum += $i;
// 		return $sum;     // RETURN выйдет из цикла и фу-ии. Посл  
// 	}					 // 1й, итерации. На выводе будет 1
// 	return $sum; 		 // RETURN выйдет из фу-ии, когда пол.
// }					 // результат цикла. На выводе 15
// $res = func();
// echo $res;

// ДЗ(Цикл и return в PHP)
// №1 (исправьте ДЗ)
// function func($num) {
// 	$sum = 0;
// 	
// 	for ($i = 1; $i <= $num; $i++) {
// 		$sum += $i;
// 	}
// 		return $sum;
// }
// 
// echo func(5);
// return был цикле - т.е не даёт "прогнать" счётчик.



/***** ПРИМЕНЕНИЕ RETURN В ЦИКЛЕ В PHP 173/178 *****/ ✓

// return - в цикле, не всегда ошибка. 

// функция опр. ско-ко э-тов массива надо сложить 
// чтобы сумма стала больше или равна 10:

// $arr = [1, 2, 3, 4, 5, 6, 7];
// function myFunc($arr) {
// 	$length = count($arr);
// 	$sum = 0;
// 	for ($i = 0; $i < $length; $i++) {
// 		$sum += $arr[$i]; 		
// 		// если сумма больше или равна 10:
// 		if ($sum >= 10) {
// 		// используем return, как выход из функции и из цикла
// 			return $i + 1; 
// 		}
// 	}
// }
// echo $res = myFunc([1, 2, 3, 4, 5]);

// ДЗ (Применение return в цикле РНР):

// №1
// Написать фу-ю, которая вычисляет сколько целых чисел,
// начиная с 1, нужно сложить, чтобы результат был больше 100:
// function func() {
// 	$sum = 0;
// 	for($i = 1; $i == true; $i++) {  // бесконечный цикл
// 		$sum += $i;
// 		if ($sum >= 100) {
// 			return $i; 				 // выход из цикла
// 		}
// 		
// 	}
// }
// echo func();					     // 14 целых чисел

// №2
// Напишите функцию, которая параметром будет принимать число
// и делить его на 2 столько раз, пока результат 
// не станет меньше 10. Пусть функция возвр. кол-во итераций,
// которое потребовалось для достижения результата.
// function calc($num) {
// 	for ($i = 1; $i == true; $i++) {
// 		$num = $num / 2;
// 		if ($num < 10) {
// 			return $i;
// 		}
// 	}
// }
// echo calc(20);



/***** ПРИЕМЫ РАБОТЫ С RETURN В PHP 174/178 *****/ ✓

// №1
// Дана следующая функция.
// Перепишите ее в сокращенной форме согласно изученной теории.
// function func($num1, $num2) {
// 	if ($num1 > 0 && $num2 > 0) {
// 		return $num1 * $num2;
// 	} else {
// 		return $num1 - $num2;
// 	}
// }
// echo func(3, 4);



/***** ФЛАГИ В ФУНКЦИЯХ PHP 175/178 *****/ ✓

// В фу-ях можно исп-ть флаги в неявном виде с помощью return.
// Напишем фу-ю которая проверяет, что все эл-ты массива - true
// $arr = [1, -2, 3, 4];
// function isPositive($arr) {
// 	foreach ($arr as $elem) {
// 		if ($elem < 0) {
// 			return false;	     // есть отриц. зн. exit
// 		}
// 	}
// 	return true;			     // все положит. окей, exit 
// }
// var_dump (isPositive($arr));  // возвратит false т.к есть -2


// ДЗ (флаги в функциях):

// №1
// Сделайте функцию, которая параметром будет принимать массив
// с числами, и проверять, что все элементы в этом массиве 
// являются четными числами.
// $arr = [2, 4, 6, 8];
// function checkNum($arr) {
// 	foreach ($arr as $elem) {
// 		if ($elem % 2 != 0) {
// 			return false;
// 		}
// 	}
// 		return true;
// }
// var_dump(checkNum($arr));  // true

// №2
// Сделайте функцию, которая параметром будет принимать массив
// и проверять, что все э-ты массива являются нечетными.
// $arr = [1, 3, 5, 8];
// function checkNum($arr) {
// 	foreach ($arr as $elem) {
// 		if ($elem % 2 == 0) {
// 			return false;
// 		}
// 	}
// 		return true;
// }
// var_dump(checkNum($arr));  // false, т.к есть 8
// т.е у нас получается - если цикл всё перебирает это true
// если он останавливается, зн - false

// №3
// Сделайте функцию, которая параметром будет принимать arr
// и проверять, есть ли в этом массиве два один. эл-та подряд
// $arr = [1, 4, 2, 1, 8, 8];
// function check($arr) {
// 	$length = count($arr) - 2;
// 	for ($i = 0; $i <= $length; $i++) {
// 		if ($arr[$i] == $arr[$i+1]) {
// 			return true;
// 		}
// 	}
// 	return false;
// }
// 
// var_dump(check($arr));



/** ЛОГИЧЕСКИЕ ОПЕРАТОРЫ БЕЗ IF В ФУНКЦИЯХ PHP 176/178 **/ ✓

// ДЗ (пишем фу-ии в сокращенной форме):

// №1
// function func($a, $b) {
// 	return $a === $b;
// } 
// var_dump(func(2,3));

// №2
// function func($a, $b) {
// 	return $a !== $b;
// }
// var_dump(func(3,3));

// №3
// function func($a, $b) {
// 	return $a + $b >= 10;
// }
// var_dump(func(13,3));

// №4
// function func($num) {
// 	return $num >= 0;
// }
// var_dump(func(-4));



/***** СОВЕТЫ ПО СОЗДАНИЮ ФУНКЦИЙ В PHP 177/178 *****/ ✓

// 1. Имена фу-ий должны быть глаголами.
// 2. Имя каждой фу-ии должно точно отражать то, что фу-я дел.
// 3. Фу-я должна делать то, что явно подразумевается ее назван.
// 4. Одна фу-я - одно действие.(т.е если сумма - только сумма)
// 5. Используйте внутри фу-ий вспомогательные фу-ии.
// 6. Код фу-ии лучше не делать больше 10 - 15 строк.
// 7. Длинные фу-ии лучше разбивать на ряд вспомогательных.
// 8. В именах лучше всего использовать префиксы:
// 	  show, get, set, calc, create, change, check
// 9. Выносите дублирующийся код в функции.



/***** ПРАКТИКА НА ФУНКЦИИ PHP 178/178 *****/ ✓

// №1
// Сделайте функцию, которая параметром будет
// принимать число и возвращать массив его делителей.

// $num / 7 = 3 ; $num - зад. число, 7 - его делитель
// $num / 3 = 7 ; $num - зад. число, 3 - его делитель
// надо сделать массив делителей заданного числа в нашу фу-ю

// Решение:
// в конце у нас должен получится результат:
// 1. вводим var_dump(delArray(21));
// 2. выводит [3, 7, 21];

// Чтобы получить МАССИВ с такими значениями:
// 1. записать туда эти значения
// 2. Для записи этих значений в массив мы используем запись:
// 3. $num = [наши, дели, тели];

// Чтобы получить делители:
// 1. нам надо прогнать их через цикл
// 2. написать проверку на целые дилители
// 3. которая пишется с помощью остатка от деления

// function delArray($num) {
// 	for($i = 1; $i <= $num; $i++) {
// 		if ($num % $i == 0) {
// 			$arr[] = $i;
// 		} 
// 	}
// 	return $arr;
// }
// 
// var_dump(delArray(21));


// №2
// Сделайте функцию, которая параметром будет принимать два
// числа и возвращать массив их общих делителей.

// function delArray($num1, $num2) {
// for($i = 1; $i <= $num1 || $i <= $num2; $i++) {
// 	if ($num1 % $i == 0 || $num2 % $i == 0) {
// 		$arr[] = $i;
// 	} 
// }
// return $arr;
// }
// var_dump(delArray(21, 32));


// №3
// Сделайте функцию, которая параметром будет 
// принимать число и возвращать сумму его цифр.

// function returnSum($num) {
// 	for ($sum = 0, $i = 0; $i < $num; $i++) {
// 		$sum += $i;
// 	}
// 		return $sum;	
// }
// echo returnSum(5);


// №4
// Сделайте функцию, которая вернет текущий день недели словом.

// $day = 13;
// function currentDay() {
// 	$arr = ['вc', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];
// 	$date =  date('w');
// 	return $arr[$date]; 
// }
// echo currentDay();


// №5
// Сделайте функцию, которая параметром будет получать дату, 
// а возвращать день недели словом, соответствующим этой дате.

// function returnDate($randomDate) {
// 	$arr = ['вc', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];
// 	$timeStamp = strtotime($randomDate);
// 	$date = date('w', $timeStamp);
// 	return $arr[$date];
// }
// 
// echo returnDate('19.02.2024');


// №6
// Сделайте функцию, которая параметром будет принимать
// секунды, а возвращать количество суток
// соответствующих этим секундам.

// function returnDay($second) {
// 	$countDay = floor($second / 60 / 60 / 24);
// 	return $countDay;
// }
// echo returnDay(343344);


// №7
// Сделайте функцию, которая параметром будет год 
// и проверять, високосный он или нет.

// function visokos($year) {
// 	$date = date('L', strtotime("01-01-$year"));
// 	return $date;
// }
// echo visokos(2017);


// №8 
// Сделайте функцию, которая параметром будет принимать 
// число и проверять, простое оно или нет.
// число простое - если оно не делится ни на что кроме себя и 1

// $num = 121;
// $flag = false;
// for ($i = 2; $i < $num; $i++) {
// 	if ($num % $i == 0) { 
// 		$flag = true;
// 	}
// }
// if ($flag == false) {
// 	echo "число $num - простое!!";
// } else {
// 	echo "число $num - делится еще на что-то!!";
// }

?>
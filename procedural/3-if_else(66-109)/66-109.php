<?php

//************ КОНСТРУКЦИЯ IF-ELSE В PHP 66\109 **********// ✓

// Позволяет выполнять некот. код. в зависимости от некоторого усл.



//************ ОПЕРАТОРЫ БОЛЬШЕ И МЕНЬШЕ В PHP 67\109 **********// ✓

// "<=" - меньше либо равно. ">=" - больше либо равно 

// $test = 3;
// if ($test >= 10) {
// 	echo 'big';
// } else {
// 	echo 'not small';
// }



//************ ПРОВЕРКА НА РАВЕНСТВО В PHP 68\109 **********// ✓

// "=="  - равенство
// "===" - эквивалентно
// "!="  - не равно
// "!==" - не эквивалентно



//************ ПРОВЕРКА НА НЕ РАВЕНСТВО В PHP 69\109 **********// ✓

// смотрим выше.



//************ СРАВНЕНИЕ ПЕРЕМЕННЫХ В PHP 70\109 **********// ✓

// можем сравнивать 2 перемен.



//****** ТИПЫ ДАННЫХ И КОНСТРУКЦИЯ IF-ELSE В PHP  71\109 ******// ✓

// Можно сравнивать и строки:
// $test = 'abc';
 
// if ($test == 'abc') {
// 	echo '+';
// } else {
// 	echo '-';
// }



//****** ЧИСЛА В КАВЫЧКАХ В PHP 72\109 ******// ✓

// при сравнении '3' == 3  (РНР преобр. строку к числу. Соотв-истина)



//****** РАВЕНСТВО ПО ЗНАЧЕНИЮ И ТИПУ В PHP 73\109 ******// ✓

// "=="  - равенство
// "===" - эквивалентно - когда равенство еще и по типу данных
// "!="  - не равно
// "!==" - не эквивалентно 



//****** РАВЕНСТВО ПО ЗНАЧЕНИЮ И ТИПУ В PHP 74\109 ******// ✓

// смотрим выше.



//****** НЮАНСЫ ПРИ СРАВНЕНИИ ТИПОВ ДАННЫХ В PHP 75\109 ******// ✓

// 0 == '';
// 0 == '0';
// 0 == null;



//**** ИСПОЛЬЗОВАНИЕ СРАВНЕНИЯ ПО ТИПУ ДАННЫХ В PHP 76\109 ****// ✓

// В PHP общепринято везде стараться использовать строгое сравнение. 
// Считается, что в этом случае код менее подвержен ошибкам.



//****** СЛОЖНЫЕ УСЛОВИЯ В IF-ELSE В PHP  77\109 ******// ✓

// для сложного условия есть "or" и "and"



//****** ЛОГИЧЕСКОЕ И В PHP  78\109 ******// ✓

// "and" или && позв.задать одновременность условий:
// if  ($num > 0 && $num < 10);



//****** ЛОГИЧЕСКОЕ ИЛИ В PHP  79\109 ******// ✓

// Логическое ИЛИ (or) требует выполнения хотя бы одного условия:

// if  ($num > 0 || $num < 10);



//****** ПРИОРИТЕТ ОПЕРАЦИЙ СРАВНЕНИЯ В PHP  80\109 ******// ✓

// Операция "and" имеет приоритет над "or". 
// В следующем примере условие сработает
// если переменная $num от 0 до 5 ИЛИ от 10 до 20:

// $num = 3;
// if ($num > 0 and $num < 5 or $num 
// 	> 10 and $num < 20) { 
// 	echo '+++';
// } else {
// 	echo '---';
// }



//****** ГРУППИРОВКА УСЛОВИЙ В PHP  81\109 ******// ✓

// Как и в арифм. операц. можно исп-ть груп. ()
// Для регулирования приоритета.



//****** ИНВЕРТИРОВАНИЕ ВЫСКАЗЫВАНИЙ В IF-ELSE 82\109 ******// ✓

// делается с пом. знака "!"

// if ( !($num > 0 and $num < 5) ) {
// 	echo '+++';
// } else {
// 	echo '---';
// }



//****** КОНСТРУКЦИЯ IF-ELSE И БУЛЕВЫ ЗНАЧЕНИЯ 83\109 ******// ✓

// $test = true;
// 
// if ($test === true) {
// 	echo '+++';
// } else {
// 	echo '---';
// }



//****** ЛОГИЧЕСКИЕ ЗНАЧЕНИЯ И ДВОЙНОЕ РАВНО 84\109 ******// ✓

// Если в перем. не булево знач. то оно будет преобр. к булеву.
// И только затем будет сравниваться.
// if ($test == true) {
// 	echo '+++';
// } else {
// 	echo '---';
// }



//****** СОКРАЩЕННЫЙ IF В КОНСТРУКЦИИ IF-ELSE 85\109 ******// ✓

// 	if ($test == true) записывают, как if ($test)
//  отрицательное: (!$test);



//****** НЮАНС СОКРАЩЕННЫХ ОПЕРАЦИЙ 86\109 ******// ✓

// когда пишем: if ($test)
// оно читает как: if ($test == true)



//****** КОМАНДА ISSET() В PHP 87\109 ******// ✓

// isset() - проверка переменной на null.
// если перемен равна null, или не объявлена
// значит она не существует

// когда перемен. равна 0 или ' '  (пустоте), то она существует.



//****** ПОДАВЛЕНИЕ ВОРНИНГА В PHP 88\109 ******// ✓

// isset () - при проверке подавляет notice или warning
// если перемен. не объявлена.
// В отл. от обычной проверки "if ($test)".


// if (isset($test)) {
// 	 echo $test;
// } else {
// 	 echo 'variable doesn\'t exist';
// }



//****** ИНВЕРТИРОВАНИЕ ВЫСКАЗЫВАНИЯ В PHP 89\109 ******// ✓

// Обратная проверка, на то, что переменная не определена:
// т.е если не существует то выведи "+++":

// $test = null;
// if (!isset($test)) {
// 	echo '+++';
// } else {
// 	echo '---';
// }



//****** ЭЛЕМЕНТЫ МАССИВОВ В PHP 90\109 ******// ✓

// С пом. isset(), можно проверить сущест. элемента массива.

// isset($arr['5'])  // или сам массив: isset($arr);



//****** КОМАНДА EMPTY В PHP 91\109 ******// ✓

// empty() - проверка на пустоту.
// перемен. пустая, если она - '0', '', false, null.

// Для инвертации исп. "!" т.е 	if(!empty($test)); - такое чаще прим.

// $test = 'null'; 			// тут уже строка
// 
// if (!empty($test)) {		// если не пустая
// 	echo '+++';				// то выведи +++
// } else {
// 	echo '---';
// }						// В рез-тате +++



//****** СОКРАЩЕННЫЙ СИНТАКСИС IF-ELSE В PHP 92\109 ******// ✓

// Проверку можно делать одним if(); else - не обязательно ставить.



//****** НЕОБЯЗАТЕЛЬНОСТЬ ФИГУРНЫХ СКОБОК В PHP 93\109 ******// ✓

// если 1 выражение, то можно не писать:
// if ($test == 0) echo '+++'; else echo '---';
// НО ЭТО ПЛОХО! так не делать!

// А так можно (Когда встройка в html):
// <? if ($test == 0):>
// 		<? echo '+++'>
// <?else >
// 		<?	echo '---'>



//*** ПРОБЛЕМА НЕОБЯЗАТЕЛЬНОСТИ ФИГУРНЫХ СКОБОК В PHP 94\109 ***// ✓

// в .php всегда надо ставить "{ }" во избежании, глупых ошибок!
// в html можно <?foreach > <?end foreach > и.т.д (c if аналогично)



//****** КОМБИНАЦИИ КОНСТРУКЦИЙ IF-ELSE В PHP 95\109 ******// ✓

// $day = mt_rand(1, 31);
// 
// if ($day < 10) {
// 	echo $day . ' декада 1';
// } elseif ($day < 20) {
// 	echo $day . ' декада 2';
// } else {
// 	echo $day . ' декада 3';
// }



//****** КОНСТРУКЦИЯ ELSEIF В PHP 96\109 ******// ✓

// Конструкция elseif позволяет задавать условия в блоке else
// Позв. отловить ситуацию, когда знач. перем. $num не подходит
// Ни под одно из условий:

// $day = mt_rand(1, 51);
// 
// if ($day < 10) {
// echo $day . ' декада 1';
// } elseif ($day < 20) {
// echo $day . ' декада 2';
// } elseif ($day < 31) {
// echo $day . ' декада 3';
// } else {
// echo 'Асибка';
// }


//****** ВЛОЖЕННЫЕ IF В PHP 97\109 ******// ✓

// констр. if и else можно вкладывать друг в друга произвол. образом
// ДЗ:

// Пусть в переменной $age хранится число. Если это число
// меньше 10 или больше 99, то выведите на экран сообщение об
// этом. Если же число попадает в указанный диапазон, то найдите
// сумму цифр этого числа. Если полученная сумма меньше или
// равна 9, то выведите на экран сообщение о том, что сумма цифр
// однозначна, в противном случае выведите сообщение о том, что 
// сумма цифр двузначна.

// $age = mt_rand(1, 135);
 
// if ($age > 10 && $age < 99) {
 	
// 	$res = (string)$age;
// 	$sum = $res[0] + $res[1];
	
// 	if ($sum <= 9) {
// 		echo $sum . ' - сумма цифр однозначна';
// 	} else {
// 		echo $sum . ' - сумма цифр двузначна';
// 	}
	
// } elseif($age < 10) {
// 	echo $age . ' меньше 10';
// } else {
// 	echo $age . ' больше 99';
// }



//****** КОНСТРУКЦИЯ SWITCH-CASE В PHP 98\109 ******// ✓

// Конструкция switch-case, альтернатива 'else-if':

// ДЗ:
// Переменная $num может принимать значения 1, 2, 3 или 4. 
// Определите, в какую пору года попадает значение этой переменной 

// $num = mt_rand(1, 4);

// switch ($num) {			// главный if
// 	case '1':				// иначеЕсли 1
// 		echo 'Зима';		// Выведи 'зима'
// 	break;
// 	case '2':
// 		echo 'Весна';
// 	break;
// 	case '3':
// 		echo 'Лето';
// 	break;
// 	default:				// else
// 		echo 'Осень';
// 	break;
// }



//****** НЕОБЯЗАТЕЛЬНОСТЬ BREAK В PHP 100\109 ******// ✓

// Команда break; тоже не является обязательной.
// Однако без нее поведение блоков "case", будет неожиданным.



//****** ТЕРНАРНЫЙ ОПЕРАТОР В PHP 101\109 ******// ✓

// * Используется только в самых простых случаях! *
// т.е когда нужно сделать 1 проверку:

// $num = mt_rand(10, 20);

// $res = $num > 16 ? 'увези за 100 морей' : '8 лет турмы!';
 
// echo $res;

// ? - условия проверки(слева что проверяем ? 
// справа ответ если true) 
// : - иначе



//****** ОПЕРАТОР ОБЪЕДИНЕНИЯ С NULL В PHP 102\109 ******// ✓

// Чтобы не писать isset, проверить на существование можно так:

// $arr['test'] = null;

// $elem = $arr['test'] ?? 'empty';

// echo $elem;			// empty

// ?? - оператор объеденения c null.
// Который позв. сокр. проверить перемен. на существование



//****** ОПЕРАТОР ОБЪЕДИНЕНИЯ С NULL В PHP 102\109 ******// ✓

// Проверим существует ли $arr['test'] (изначально он не существует).

// if (isset($arr['test'])) {
// 	$elem = $arr['test'];
// } else {
// 	$elem = 'empty';
// }
// var_dump($elem);


// с пом "??" можно написать такую простую проверку на null:
 
// $elem = $arr['test'] ?? 'empty';
// var_dump($elem);



//**** ЦЕПОЧКИ ОПЕРАТОРОВ ОБЪЕДИНЕНИЯ С NULL В PHP 103\109 ****// ✓

// Операторы объединения можно вызывать друг за другом цепочкой.
// Можно объеденить неск-ко выражений с пом. ?? и проверить на null:

// $res =  $user['name'] ?? $user['surname'] ?? 'empty!';

// echo $res;		// т.к  $user['name'] пустой, выведет 'empty!';



//**** ЛОГИЧЕСКИЕ ОПЕРАЦИИ В PHP 104\109 ****// ✓

// конструкция "if" - не яв. обяз. для сравнения.
// можно сравнивать без нее , просто с операторами:

// (1 == 1) // true  или  (1 < 2 ) //

// Можно, для удобства выражения, написать в переменные:

// $a = 2 + 2;
// $b = 2 + 3;
// var_dump($a > b);	// false



//**** ОПРЕДЕЛЕНИЕ ЧЕТВЕРТИ ЧАСА В PHP 105\109 ****// ✓

// ДЗ:
// $min = mt_rand(0, 59);

// if ($min < 20) {
	// echo $min . ' первая часть часа! ';
// } elseif ($min < 40) {
	// echo $min . ' вторая часть часа! ';
// } else {
	// echo $min . ' третья часть часа! ';
// }



//**** ПРОВЕРКА ДЛИНЫ СТРОК И МАССИВОВ В PHP 106\109 ****// ✓

// Решение ДЗ:
// $arr = ['1', '4', '3'];

// if (count($arr)==3) {
//	$sum = $arr[0] + $arr[1] + $arr[2];
//	echo $sum;
// }



//**** ПРОВЕРКА СИМВОЛА СТРОКИ В PHP 107\109 ****// ✓

// Решение ДЗ (проверили, заканчивается ли строка на "0"):

// $str = '234543254623412302';
// $count = strlen($str);
// $res = $count - 1;

// echo $str[$res];



//**** ОСТАТОК ОТ ДЕЛЕНИЯ В PHP 108\109 ****// ✓

// Решение ДЗ с остатком от деления:

// $n = mt_rand(1, 44);
// 
// if ($n % 2 == 0) {
// 	echo $n . ' чётное!';
// } else {
// 	echo $n . ' не чётное!';
// }



//**** ПРАКТИКА НА УСЛОВИЯ IF-ELSE В PHP 109\109 ****// ✓

// №1 
// В переменной $month лежит какое-то число из интервала от 1
// до 12. Определите в какую пору года попадает этот месяц (зима,
// лето, весна, осень).

// $month = mt_rand(1, 12);
 
// if($month < 6 && $month > 2) {
// 	echo $month . ' месяц' . ' Весна';
// } elseif ($month >= 6 && $month < 9) {
// 	echo $month . ' месяц' . ' Лето';
// } elseif ($month > 9 && $month < 12) {
// 	echo $month . ' месяц' . ' Осень';
// } else {
// 	echo $month . ' месяц' . ' Зима';
// }


// №2 
// Дана строка, состоящая из символов, например, 'abcde'. Про
// верьте, что первым символом этой строки является буква 'a'.

//$str = 'asdfasdfafsabcde';

// if ($str[0] == 'a') {
//	echo 'Ура! Первый символ - это "а" !';
// } else {
//	echo 'первый символ не - а(((';
// }


// №3 
// Дано число, например, 12345
// Проверьте, что первым символом этого числа является цифра 1,2,3

// $num = 12345;
// $res = (string) $num;

// if($res[0] == 1 && $res[1] == 2 && $res[2] == 3) {
// 	echo "первые сиволы 123!!";
// } else {
// 	echo 'первые символы не 123((';
// }
// var_dump($res);


// №4 
// Дано трехзначное число. Найдите сумму цифр этого числа
// $num = 678;
// $res = (string) $num;
// $sum = $res[0] + $res[1] + $res[2];
// echo $sum;


// №5 
// Дано число из 6-ти цифр. Проверьте, что сумма первых трех цифр 
// равняется сумме вторых трех цифр.(написал с пом. тернарных).

// $n = 321321;

// $str = (string) $n;

// $sum = $str[0] + $str[1] + $str[2];
// $sum1 = $str[3] + $str[4] + $str[5];

// $check = $sum == $sum1 ? 'They similar!' : 'not similar :(';
// echo $check;

?>
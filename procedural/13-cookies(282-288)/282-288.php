<?php

/**** ВВЕДЕНИЕ В РАБОТУ С КУКАМИ В PHP 282/288 ✓ *****/

// ЧТО ТАКОЕ КУКИ (COOKIE) ?
// КУКИ - кусочки строк, которые хранятся в спец. месте браузера userа
// Каждая кука имеет свое имя, по кот. ее можно прочитать и записать.

// КАК ЗАПИСАТЬ КУКУ?

// page2.php
// Запись делается с помощью:
// setcookie('test', 'abc'); // ('имя куки', 'значение куки');
// (Как и в сессиях ЗАПИСЬ делать ДО ВЫВОДА!)

// КАК ПРОЧИТАТЬ КУКУ?

// result.php
// 	echo $_COOKIE['test'];   // abc

// Записывать куки и читать их можно в 1 файле
// А также если использовать 2 файла, то в result.php, НЕ НАДО ПИСАТЬ setcookie(); (т.е стратовать как в сессии, тут уже другое).

// ДЗ (введение в куки):
// 1

// page2.php
// setcookie('name', 'iCool');

// result.php
//  echo $_COOKIE['name']; // iCool



/**** ПРОБЛЕМА УСТАНОВКИ КУК В PHP 283/288 ✓ *****/

// ПРОБЛЕМА У КУК КОТ. ЗАПИСАНЫ НА ОДНОЙ СТРАНИЦЕ ЧЕРЕЗ SETCOOKIE() ?
// Такие куки, доступны, только после перезагрузки страницы.

// Пример (Проверим наличие проблемы):
// 	setcookie('str', 'abc');
//	var_dump($_COOKIE['str']); // сначала null, а потом 'abc'

// ДЗ (проблема установки кук):
// 1
// Проверим вышеуказ. описание кук:
// setcookie('name', 'iCool');
// var_dump($_COOKIE['name']); // сначала notice и null, потом 'iCool'



/**** МГНОВЕННАЯ УСТАНОВКА КУК В PHP 284/288 ✓ *****/

// Чтобы кука устанавливалась мнгновенно, есть хитрый прием:
// (Устанавливаем куку, потом сразу записываем вручную в $_COOKIE);
// setcookie('str', 'eee');
// $_COOKIE['str'] = 'eee';

// Чтобы кука каждый раз не отправлялась в браузер, можно запись куки
// сделать внутри условия:

/*
if (!isset($_COOKIE['str'])) {      // если куки нет
		setcookie('str', 'eee');    // установим ее
		$_COOKIE['str'] = 'eee';    // и сразу запишем
	}
echo $_COOKIE['str'];               // выведет 'eee'
*/

// Соотв. если кука - есть, то не трогаем.
// Таким образом, и при первом заходе, и при последующих в $_COOKIE будет находится наша кука.

// ДЗ (мнгновенная установка кук):
// 1
// Опробовать вышеуказанный прием.
/*
if (!isset($_COOKIE['str'])) {  // если куки нет
    setcookie('str', 'abc'); 	// устанавливаем куки
    $_COOKIE['str'] = 'abc'; 	// пишем вручную в $_COOKIE
}
echo $_COOKIE['str'];		// куки будут сразу))
*/



/**** СЧЕТЧИК ОБНОВЛЕНИЯ СТРАНИЦЫ НА КУКАХ В PHP 285/288 ✓ *****/

/* Сделаем счётчик обновления страницы:
if (!isset($_COOKIE['counter'])) {      // если куки нет
    setcookie('counter', 1);            // задаём куки
    $_COOKIE['counter'] = 1;            // записываем куки
} else {
    setcookie('counter', ++$_COOKIE['counter']); // если есть кука то
}                                       // врубаем счётчик
echo $_COOKIE['counter'];           // выводим это на экран
*/

// ДЗ (счётчик обновления страницы на куках):
// 1
// Запишите в куку момент времени захода пользователя на страницу. При обновлении страницы выведите на экран, сколько времени прошло с момента первого захода на страницу.
/*
if (!isset($_COOKIE['first'])) {
    $first_time = time();
    setcookie('first', "$first_time");
    $_COOKIE['first'] = "$first_time";
} else {
    $time = time();
    $res = $time - $_COOKIE['first'];
    echo 'С момента первого захода прошло ' . "$res" . 'секунд';
}
*/



/**** ВРЕМЯ ЖИЗНИ КУКИ В PHP 286/288 ✓ *****/

// Когда куки установлены с пом. setcookie('test', 'abc');
// Они живут, только до закрытия браузера.

// Чтобы продлить жизнь куки, есть 3й параметр, который
// Устанавливает время жизни кук (тут на 1 час):
// 	setcookie('test', 'abcde', time() +  60 * 60);

// * 3й-параметр принятно записывать так:
// * (текущ. момент времени + N секунд (60 * 60 * 24)).
// * Пишутся (60 * 60) итд , для лучшего понимания кода

// Теперь установим куку на сутки:
// setcookie('test', 'abcde', time() + 60 * 60 * 24);

// 60 *60 - час
// 60 * 60 * 24 - сутки
// 60 * 60 * 24 * 30 - месяц (30 дней)
// 60 * 60 * 24 * 365 - год (обычный)
// 60 * 60 * 24 * 365 * 10 - 10 лет (обычных)

// ДЗ (время жизни куки):
// 1
// установить куку на месяц, год, 10 лет
/*
if (!isset($_COOKIE['life'])) {
// 30 месяц  365 год, 10 лет итд :
    setcookie('life', 'pink', time() + 60 * 60 * 24 * 30);
    $_COOKIE['life'] = 'pink';
}
*/



/**** УДАЛЕНИЕ КУК В PHP 287/288 ✓ *****/

// В PHP нет фу-ии, для удаления кук.
// Поэтому куку удаляют - устанавливая время смерти на тек. момент:
// setcookie('test', '', time());

// * Удаление куки, приведет к изменения $_COOKIE только после
// перезагрузки страницы.

// ДЗ (удалить куку):
// 1
// if (!isset($_COOKIE['life'])) {
//	setcookie('life', 'pink', time() + 60 * 60 * 24 * 365);
//	$_COOKIE['life'] = 'pink';
// }

// Удаляем куки (сработает после перезагрузки страницы):
// setcookie('life', '', time());



/**** МГНОВЕННОЕ УДАЛЕНИЕ КУК В PHP 288/288 ✓ *****/

// Чтобы удаление куки работало сразу, при первом заходе
// Используем уже знакомый приём:
/*
if (isset('[$_COOKIE['test'])) {
    setcookie('test', '', time());
    unset($_COOKIE['test']); //вручную сразу удаляем куку 'test'
}
var_dump($_COOKIE['test']); // куки нет :(  - "удалена"
*/

// ДЗ (удалить куку с помощью хитрого приема):
// 1
// создаём годовую куку
// if (!isset($_COOKIE['life'])) {
//	setcookie('life', 'pink', time() + 60 * 60 * 24 * 365);
//	$_COOKIE['life'] = 'pink';
// }

// удаляем куку при первом заходе
// if (isset($_COOKIE['life'])) {
//	setcookie('life', '', time());
//	unset($_COOKIE['life']);
// }


/* Сессии и куки - это два разных механизма для хранения данных на стороне клиента в PHP. Вот подробное объяснение их различий с примерами:


ХРАНЕНИЕ ДАННЫХ:

Куки: Данные куки хранятся на стороне клиента (в браузере пользователя) в виде небольших текстовых файлов.
Сессии: Данные сессии хранятся на стороне сервера, а на стороне клиента хранится только уникальный идентификатор сессии (обычно в куки).


ОБЪЕМ ДАННЫХ:

Куки: Куки имеют ограничение на размер данных (обычно около 4 КБ).
Сессии: Сессии могут хранить большие объемы данных, так как они хранятся на сервере.


БЕЗОПАСНОСТЬ:

Куки: Данные в куки могут быть доступны и изменены на стороне клиента, что делает их менее безопасными.
Сессии: Данные сессии хранятся на сервере и не могут быть напрямую доступны или изменены на стороне клиента, что обеспечивает большую безопасность.


СРОК ХРАНЕНИЯ:

Куки: Куки могут иметь установленный срок действия и сохраняться на стороне клиента даже после закрытия браузера.
Сессии: Данные сессии обычно удаляются после закрытия браузера или после определенного периода неактивности (можно настроить, что тоже хранится долго, на сервере).


ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ:

Куки:

// Установка куки
setcookie("username", "John", time() + 3600);

// Получение значения куки
$username = $_COOKIE["username"];
echo "Welcome, " . $username;

Сессии:

// Начало сессии
session_start();

// Сохранение данных в сессии
$_SESSION["username"] = "John";
$_SESSION["email"] = "john@example.com";

// Получение данных из сессии
$username = $_SESSION["username"];
$email = $_SESSION["email"];
echo "Welcome, " . $username . " (" . $email . ")";

// Удаление данных сессии
unset($_SESSION["username"]);
unset($_SESSION["email"]);

// Завершение сессии
session_destroy();



В примере с куки мы устанавливаем куки с именем "username" и значением "John", которое истекает через 1 час. Затем мы получаем значение куки и выводим приветственное сообщение.

В примере с сессиями мы начинаем сессию с помощью session_start(), затем сохраняем данные в сессии, используя глобальный массив $_SESSION. Мы можем получить данные из сессии и использовать их. Позже мы удаляем данные сессии с помощью unset() и завершаем сессию с помощью session_destroy().

Таким образом, основное различие между куки и сессиями заключается в месте хранения данных (клиент или сервер), объеме данных, безопасности и сроке хранения. Сессии обычно предпочтительнее для хранения важных данных, таких как информация о пользователе, в то время как куки могут использоваться для хранения менее критичных данных или пользовательских предпочтений.

ОТВЕТЫ С ХАРБРА:
// В КУКУ можно ставить безобидные даные:
- язык пользователя или город
- тема (в плане дизайна)
- какие-то метки для маркетинга (первый источник или ref-ссылка)
- можно хранить корзину (id товаров)
- какие-то даты
и.т.д (в основном инфа из фронтенда)

// В сессию соотв. данные посерьезнее:
- инфа о usere,
- номер тел,
- email
- итд
?>
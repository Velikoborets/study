<?php

/**** ЧТЕНИЕ ФАЙЛОВ В PHP 289/314 ✓ *****/

// file_get_contents('имя файла'); // на выводе будет его содержимое
// ДЗ (чтение файлов):
/*
$num1 = file_get_contents('file1.txt');
$num2 = file_get_contents('2.txt');
echo $sum = $num1 + $num2; // 3
*/



/**** ЗАПИСЬ ФАЙЛОВ В PHP 290/314 ✓ *****/

// file_put_contents('имя файла', 'что записываем');
// запишется только после обновления страницы.

// ДЗ (запись файлов)
/*
$arr = ['1', '2', '3'];
$sum = array_sum($arr);
file_put_contents('file1.txt', "$sum");
*/



/*** КОМБИНАЦИЯ ОПЕРАЦИЙ ЧТЕНИЯ И ЗАПИСИ ФАЙЛА В PHP 291/314 ✓ ***/

// Запишем в "file1.txt" текст "super"

// фиксируем текст из файла "file1.txt" в $text
// $text = file_get_contents('file1.txt');  // super

// допишем к этому тексту "!!!"
// (если введем 2-м параметром '!!!', то фу-я перезапишет текст.)
// (поэтому нам надо добавлять "$text" . и то что хотим дописать !!!):
// $recordText = file_put_contents('file1.txt', "$text" . '!!!');


// ДЗ (комбинация операций чтения и записи файла в РНР):
// 1
// Пусть у вас есть файл, в котором записано некоторое число. Откройте этот файл, возведите число в квадрат и запишите обратно в файл.

// file1.txt
// в файле нах. число 2.

// page2.php
// фиксируем содержимое файла
// $text = file_get_contents('file1.txt');

// возведем в квадрат
// $res = $text * $text;

// результат запишем в файл
// $record_in_file = file_put_contents('file1.txt', "$res");


// 2
// Пусть в корне вашего сайта лежит файл count.txt. Изначально в нем записано число 0. Сделайте так, чтобы при обновлении страницы наш скрипт каждый раз увеличивал это число на 1. То есть у нас получится счетчик обновления страницы в виде файла

// Фиксируем содержимое
// $num = file_get_contents('file1.txt');

// Запускаем счётчик
// $counter = ++$num;

// Записываем результат в файл
// $record = file_put_contents('file1.txt', "$counter");


// 3
// Пусть в корне вашего сайта лежат файлы 1.txt, 2.txt и 3.txt. Вручную сделайте массив с именами этих файлов. Переберите его циклом, прочитайте содержимое каждого из файлов, слейте его в одну строку и запишите в новый файл new.txt. Изначально этого файла не должно быть.
/*
$arr = ['file1.txt', 'file2.txt', 'file3.txt'];
$str = ''; 		   // сформируем строку для записи туда элементов
foreach ($arr as $file_name) {
// фиксируем текст этих файлов
	$read_file = file_get_contents("$file_name");
// конкатенируем текст 1 строку
	$str .= $read_file;
}
// записываем результат в new.txt
file_put_contents('new.txt', "$str");
*/



/*** ОТНОСИТЕЛЬНЫЕ ПУТИ В PHP 292/314 ✓ ***/

// Если файл, лежит не в корне, а в другой папке, то пишем путь:
// file_get_contents('directory/test.txt');

// поиск файла на уровень выше:
// file_get_contents('../test.txt');


// Пример посложнее:
//script
    //test/index.php      // тут мы )

// directory/ test.txt    // сюда нам нада

// file_get_contents('../../directory/test.txt');


// ДЗ (относительные пути в РНР):

// 1
// Прочитать содержимое текстового файла:
/*
index.php
/dir1/
    /dir2/
        test.txt
$read_file = file_get_contents('/dir1/dir2/text.txt'); */


// 2
/*
/script/
    index.php
/dir1/
    /dir2/
        test.txt
$read_file = file_get_contents('../dir1/dir2/text.txt'); */


// 3
/*
/script1/
    /script2/
        index.php
/dir1/
    test.txt
$read_file = file_get_contents('../../dir1/text.txt'); */


// 4
/*
/script1/
    /script2/
        /script3/
            index.php
/dir1/
    /dir2/
        /dir3/
            test.txt
$read_file = file_get_contents('../../../dir1/dir2/dir3/text.txt');*/



/*** АБСОЛЮТНЫЕ ПУТИ В PHP 293/314 ✓ ***/

// если у нас в корне page2.php и test.txt
// и мы поставим в фу-ии чтения "/" :
// file_get_contents('/test.txt');
// то пусть станет абсолютным
// Абсолютный - когда файл ищется от корня ОС

// Пример
// $_SERVER['DOCUMENT_ROOT']; - позволяет нам получить путь от корня:
// echo $_SERVER['DOCUMENT_ROOT']; // C:/OpenServer/domains/trepachev

// теперь можем добавить корневой путь к пути нашего файла:
// (и получим правильный корневой путь):
// echo file_get_contents($_SERVER['DOCUMENT_ROOT'] . '/test.txt');



/*** ПРЕИМУЩЕСТВА АБСОЛЮТНОГО ПУТИ В PHP 294/314 ✓ ***/

// АБСОЛЮТНЫЙ ПУТЬ:
// На сколько бы глубоко нужная нам папка не была зарыта
// мы идём к ней в любом случае, от КОРНЯ  дириектории:
// $root = $_SERVER['DOCUMENT_ROOT'];
// $absolute_path = file_get_contents($root . '/dir1/test.txt');

// ОТНОСИТЕЛЬНЫЙ ПУТЬ:
// А тут нам надо выходить из миллиона папок
// И только потом искать ту, что нам нужна
// $relative_patch = file_get_contents('../../dir1/test.txt');



/***  АБСОЛЮТНЫЕ ПУТИ К ПАПКЕ И ФАЙЛУ СКРИПТА В PHP 295/314 ✓ ***/

// Иногда нам надо получить путь к папке со скриптом, напрямую, минуя корень сайта.

// __DIR__ - константа, которая показывает полный путь, ДО ПАПКИ в которой она выведена.
// __FILE__ -  константа, которая показывает полный путь, ДО ФАЙЛА в котором она выведена.

// найти test.txt файл:
/* 1
$root = $_SERVER['DOCUMENT_ROOT'];
$read_file = file_get_contents($root . '/dir1/test.txt');
echo $read_file;
*/

/*2
$root = $_SERVER['DOCUMENT_ROOT'];
$read_file = file_get_contents($root . '/dir1/dir2/dir3/test.txt');
echo $read_file;
 */



/***  ПЕРЕИМЕНОВЫВАНИЕ ФАЙЛОВ В PHP 296/314 ✓ ***/

// $rename_test = rename('имя файла', 'на какое имя переимен.');



/*** ПЕРЕМЕЩЕНИЕ ФАЙЛОВ В PHP 297/314 ✓ ***/

// можем одновременно перемещать и переименовывать файлы:
// $rename_and_move = rename('test.txt', 'dir1/new.txt')

// (или просто перемещать, не переименование):
// $rename = rename('test.txt', 'dir1/test.txt');

// ДЗ (Перемещение файлов):
// 1
// Пусть в корне вашего сайта лежит файл file1.txt. Пусть также в корне вашего сайта лежит папка dir1. Переместите файл в эту папку.
// $move_file = rename('file1.txt', 'dir1/file1.txt');

// 2
// Пусть в корне вашего сайта лежит папка dir1, а в ней файл file1.txt. Пусть также в корне вашего сайта лежит папка dir2. Переместите файл в эту папку.
// $root = $_SERVER['DOCUMENT_ROOT'];
// $move_file = rename('dir1/file1.txt','dir2/file1.txt');



/*** КОПИРОВАНИЕ ФАЙЛОВ В PHP 298/314 ✓ ***/

// $copy = copy('путь к файлу', 'куда кладём копию');

// положим копию в корень:
// $copy = copy('results.txt', 'copy.txt');

// положим копию в папку dir1/(имя копии)
// $copy = copy('file1.txt', 'dir1/copyfile.txt');

// 1
// Пусть в корне вашего сайта лежит файл. С помощью цикла положите в папку copy пять копий этого файла. Именем файлов копий пусть будут их порядковые номера.
/*
for ($i = 1; $i <= 5; $i++) {
    copy('file1.txt', "dir1/$i.txt");
}
*/



/*** УДАЛЕНИЕ ФАЙЛОВ В PHP 299/314 ✓ ***/

// $unlink = unlink('путь к удаляемому файлу');

// в корне : 1.txt, 2.txt, 3.txt ;

// создаём массив из их имен
// $arr = ['1.txt', '2.txt', '3.txt'];

// перебираем циклом и удаляем все эти файлы:
// foreach ($arr as $elem) {
//    unlink("$elem");
// }



/*** ОПРЕДЕЛЕНИЕ РАЗМЕРА ФАЙЛОВ В PHP 300/314 ✓ ***/

// Позв. находить размер файла в байтах:
// $file_size = filesize('путь к файлу');

// Перевод размера файла в килобайты:
// $kilobytes = filesize('test.txt') / 1024;

// Перевод размера файла в мегабайты:
// $megabites = filesize('test.txt') / (1024*1024);


// ДЗ (опред. размера файлов):
// 1
// узнать размер progres.txt (в байтах):
// $progres_size = filesize('progres.txt');  // 5137

// 2
// узнать размер progres.txt (в килобайтах)
// $progres_size_kilobytes = filesize('progres.txt') / 1024;
// echo $progres_size_kilobytes; // 5.0166015

// 3
// Узнать размер картинки mining.jpg^
// $size_mining = filesize('mining.jpg') / (1024*1024);
// echo $size_mining; // 16.4375



/*** ПРОВЕРКА СУЩЕСТВОВАНИЯ ФАЙЛОВ В PHP 301/314 ✓ ***/

// Проверка файла на существование, перед операцией над ним
// $file_exists = file_exists(('test.txt')); // true или false.

// для удобства запишем с помощью if:
/*
if (file_exists('test.txt')) {
    echo filesize('test.txt');
} else {
    echo 'файла не существует!';
}
*/

// ДЗ (Проверка существования файлов):
// 1
// Проверьте, лежит ли в корне вашего сайта файл file.txt.
/*
if (file_exists('file.txt')) {
    echo filesize('file.txt');
} else {
    echo 'файла не существует!';
}
*/

// 2
// Проверьте, лежит ли в корне вашего сайта файл file.txt. Если нет - создайте его и запишите в него текст '!'.
/*
if (file_exists('file.txt')) {
    echo filesize('file.txt') . 'bytes';
} else {
    file_put_contents('file.txt','some text');
}
*/

// 3
// Проверьте, лежит ли в корне вашего сайта файл message.txt. Если такой файл есть - выведите текст этого файла на экран.
/*
if (file_exists('file.txt')) {
    echo file_get_contents('file.txt');
} else {
    echo 'нет такого файла!';
}
*/



/*** СОЗДАНИЕ ПАПОК В PHP 302/314 ✓ ***/

// mkdir('путь к папке'); // создаёт папку

// ДЗ (Создание папок в РНР):

// 1
// Создайте в корне сайта папку "dir"
// mkdir('dir');

// 2
// Дан массив со строками. Создайте в корне вашего сайта папки, названиями которых служат элементы этого массива
/*
$arr = ['str1', 'str2', 'str3'];
foreach ($arr as $dir) {
    mkdir("$dir");
}
*/

// 3
// Создайте в корне вашего сайта папку с названием test. Затем создайте в этой папке три файла: 1.txt, 2.txt, 3.txt.
/*
$dir = mkdir('test');
for ($i = 1; $i <= 3; $i++) {
    $create_files = file_put_contents("$i.txt", "$i");
    $move = rename("$i.txt", "test/$i.txt");
}
*/



/*** УДАЛЕНИЕ ПАПОК В PHP 303/314 ✓ ***/

// rmdir('название папки для удаления');
// rmdir('test'); // удалит, если папка пуста



/*** ПЕРЕИМЕНОВАНИЕ ПАПОК В PHP 304/314 ✓ ***/

// rename('старое назв папки', 'новое назв. папки');
// rename('old', 'new'); // папка 'old', стала 'new'



/*** ПЕРЕМЕЩЕНИЕ ПАПОК В PHP 305/314 ✓ ***/

// rename('old', 'dir/new');
// rename('назв папки', 'куда перем/создаём новую или перем. стар.');

// ДЗ (перемещ. папок):
// 1
// Переместить папку new в test/new (не создавая новую):
// $move_folder_new = rename ('new', 'test/new');



/*** ЧТЕНИЕ СОДЕРЖИМОГО ПАПКИ В PHP 306/314 ✓ ***/

// scandir('путь к папке') - массив имен файлов и подпапок
// * Есть нюанс, что первые два ключа в массие будут "." и ".."
// ".." - ссылка на род.папку
// "." -  ссылка не тек.папку

// убирается это с пом. array_diff:
// array_diff() - сравнивает массивы (2 и более), и выводит значения, которые не повторяются.

// Например:
/*
$arr1  = ['1', '2', '3'];
$arr2  = ['2', '3'];
$no_repeat_values = array_diff($arr1, $arr2);
var_dump($no_repeat_values); // 1
*/


// Есть "папка test" внутри которой "папка new"
// Прочтём содержимое "test" и выведем в виде массива без "." ".." :

/*
$files = scandir('test');
$files_without_pause = array_diff($files, ['.', '..']);
var_dump($files_without_pause); // 2 => string 'new'
*/

// либо сокращенный вариант:
// $files = array_diff(scandir('test'), ['.', '..']);
// var_dump($files); //  2 => string 'new'

// ДЗ (Чтение содержимого папки в РНР):
// 1
// Пусть в корне вашего сайта лежит папка test, а в ней какие-то текстовые файлы. Выведите на экран столбец имен этих файлов.
/*
$files = array_diff(scandir('test'), ['.', '..']);
foreach ($files as $elem) {
    echo $elem . '<br>';
}
*/

// 2
// Пусть в корне вашего сайта лежит папка dir, а в ней какие-то текстовые файлы. Переберите эти файлы циклом и выведите их тексты в браузер.
/*
$files = array_diff(scandir('test'),['.', '..']);
foreach ($files as $content) {
    $read_files = file_get_contents("test/$content");
    echo $read_files . '<br>';
}
*/

// 3
// Пусть в корне вашего сайта лежит папка dir, а в ней какие-то текстовые файлы. Переберите эти файлы циклом, откройте каждый из них и запишите в конец восклицательный знак.
/*
$files = array_diff(scandir('test'), ['.', '..']);
foreach ($files as $content) {
    $content_file = file_get_contents("test/$content");
    file_put_contents("test/$content", "$content_file" . '!!!');
}
*/



/*** ОТЛИЧАЕМ ПАПКУ ОТ ФАЙЛА В PHP 307/314 ✓ ***/

// $path = 'test/1.txt'; //строка содержащая путь к файлу или папке

// is_file - определяет ссылается ли путь на файл.
// is_dir - определяет ссылается ли путь на папку.

// Например:
// var_dump(is_file($path)); // true для файла
// var_dump(is_dir($path));  // false для папки

// ДЗ (отличаем папку от файла в РНР):

// 1
// Пусть дан путь. Если путь ведет к папке выведите сообщение об этом.
/*
$path = 'test/';
$is_dir = is_dir($path);
if ($is_dir) {
    echo 'этот путь ведет к папке!';
} else {
    echo 'этот путь не ведет к папке((';
}
*/

// 2
// Пусть дан путь. Если путь ведет к папке выведите сообщение об этом.
/*
$path = 'test/1.txt';
$is_file = is_file($path);
if ($is_file) {
    echo 'этот путь ведет к файлу!!';
} else {
    echo 'этот путь не ведет к файлу((';
}
*/



/*** РАЗБИРАЕМ СОДЕРЖИМОЕ ПАПКИ В PHP 308/314 ✓ ***/

/*
// Пример (для каждого имени проверим, файл или папка):

// папка "test", с файлами и папками:
$dir = 'test';

// Заходим в папку и делаем массив из файлов, которые внутри:
// (при этом сразу удаляем точки)
$files = array_diff(scandir($dir), ['..', '.']);

// Перебираем этот массив
foreach ($files as $file) {

// И формируем путь, ко всем папкам и файлам внутри, для их проверки:
    $path = $dir. '/' . $file;

// Проверяем всю директорию на файлы, если файлы то читаем и выводим
// Иначе если папка то пометим ее словом "папка"
    if (is_file($path)) {
        echo file_get_contents($path) . '<br>';
    } else {
        echo 'папка';
    }
}
*/

// ДЗ (Разбираем содержимое папки в РНР):

// 1
/*
// Дана папка. Выведите на экран столбец имен подпапок из этой папки.
$dir = 'dir1';
$files_in_dir = array_diff(scandir('dir1'), ['.', '..']);

// переберем массив для фор-ия из него списка файлов:
foreach ($files_in_dir as $files) {

    // укажем путь (нашу папку и все файлы), для is_dir
    $path = $dir . '/' . $files;

    // напишем проверку для вывода имен папок:
    $check_folder = is_dir($path);

    // если это папка, то выведи
    if ($check_folder) {
        echo $files . '<br>';

    // (файл пометим словом "файл")
    } else {
        echo 'файл';
    }
}
*/

/*
// 2
// Дана папка. Выведите на экран столбец имен файлов из этой папки.

$dir = 'dir1';
$files_in_dir = array_diff(scandir("$dir"), ['.','..']);

foreach ($files_in_dir as $files) {

// формируем путь со всеми файлами
$path = "$dir" . '/' . "$files";

// напишем для проверки:
    if (is_file($path)) {
        echo $files . '<br>';
    } else {
        echo 'это папка' . '<br>';
    }
}
*/

// 3
// Дана папка. Запишите в конец каждого файла этой папки текущий момент времени.
/*
$dir = 'dir1';

$files_in_dir = array_diff(scandir("$dir"), ['.', '..']);

foreach ($files_in_dir as $files) {

    $path = $dir . '/' . $files; // создание пути для проверки
    $check_file = is_file($path); // пр-ка директории на наличии file
    $date = date('H:i');

    if ($check_file) {
      $read_file = file_get_contents("$path");
      $record_text = file_put_contents("$path", "$read_file" . "$date");
      $ready_file = $read_file;
      echo $ready_file . '<br>';
    } else {
        echo 'тут папка' . '<br>';
    }

}
*/



/*** ВСТАВКА ФАЙЛОВ В PHP 309/314 ✓ ***/

// Пусть есть file1.php, который выводит букву "А"

// Вставим его в page2.php и получим:
// $file = include 'file1.php'; // выведет "A" в Браузере

// Можно вывести много раз:
// include 'file1.php'; // A
// include 'file1.php'; // A

// если вывести просто переменную (то выведет только 1)
// var_dump($file);



/*** ДЕЛЕНИЕ ВЕРСТКИ НА ЭЛЕМЕНТЫ В PHP 310/314 ✓ ***/

// Чтобы не засорять код одинаковыми блоками кода
// Их надо записывать в отдельные файлы и подключать.

// Пример (У нас есть file1.php и file2.php, где повторяется <head>):

// Создадим для <head> отдельный файл (elem/head.php) :
/*
	<head>
		<title>page2</title>
		<meta charset="utf-8">
		<link rel="stylesheet" href="styles.css">
	</head>
*/

// И подключим его к  file1.php и file2.php :
/*
<html>
	<head>
		<title>page1</title>
		<?php include 'elem/head.php'; ?>
	</head>
	<body>
		text 1
	</body>
</html>
*/
// теперь у нас стало гораздо меньше дубль-кода

// ДЗ (Деление верстки на элементы в PHP) :
// 1
/*
Даны файлы со следующей версткой:
Пусть верстка файлов отличается лишь тайтлами и контентом. Вынесите содержимое хедера, футера и сайдбара в отдельные подключаемые файлы.

header.php содержит:
<header>
    а тут header!
</header>

sidebar.php содержит:
<aside>
    здесь sidebar
</aside>

footer.php содержит:
<footer>
   тут footer
</footer>


***** И ТОГО РЕЗУЛЬТАТ ***** :
<!DOCTYPE html>
<html>
	<head>
		<title>title</title>
	</head>
	<body>
<?php include 'header.php'; ?>
<?php include 'sidebar.php'; ?>
		<main>
			content
		</main>
<?php include 'footer.php';?>
	</body>
</html>
*/



/*** ЗАПИСЬ ВСТАВКИ В ПЕРЕМЕННУЮ В PHP 311/314 ✓ ***/

// Задача: записать текст из test.php в $переменную в page2.php:

// test.php
/*
<div>
    <?='test'>
</div>
*/

// page2.php
// Такие 2 способа не работают:
// include 'test.php';                   // сразу выводит в браузер
// $res = file_get_contents('test.php'); // ничего не видит


/* Для удобства напишем функцию:
// которая будет принимать файл и возвр. его содержимое в виде строки
// (для записи в переменную или др. манипуляций):
function getFile($name) {

// любой вывод, создан. скриптом после вызова этой функции
// будет сохранен в буфере, а не отпр. браузеру:
ob_start();

// т.к включена ob_start(). Вывод подкл. файла с пом. include
// будет сохранён в буфере:
include $name;

// ob_get_clean() получает содержимое буфера вывода и очищает буфер
// return возвращает это содержимое из функции getFile():
return ob_get_clean();
}

// воспользуемся фу-ей для получения файла в переменнную:
$res = getFile('test.php');
echo 'index'. ' ' . $res;    // index example
*/


// ДЗ (запись вставки в переменную):
// 1
// Сделайте файл, который будет генерировать из массива дней выпадающий список дней недели. Запишите результат в переменную в вашем основном файле. Выведите эту переменную в нескольких местах файла.

// page2.php
/*
function record_file($file_name) {
    ob_start();
    include 'test.php';
    return ob_get_clean();
}

$list_days = record_file('test');

echo $list_days;
echo $list_days;
echo $list_days;
*/


// test.php
/*
<?php $week = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб']; ?>
<select>
<?php foreach ($week as $days): ?>
    <option><?="$days"?></option>
<?php endforeach; ?>
</select>
*/



/*** ПОДКЛЮЧЕНИЕ ФАЙЛОВ В PHP 312/314 ✓ ***/

// test.php
// содержит набор функций или функцию:
/*
function square($num) {
    return $num ** 2;
}
*/

// page2.php
// сделаем так, чтобы фу-ии были доступны в основном файле:
// (теперь можем ими пользоваться):
// require 'test.php';
// echo square(3); // 9



/*** ОДНОКРАТНОЕ ПОДКЛЮЧЕНИЕ ФАЙЛОВ В PHP 313/314 ✓ ***/

// У нас есть 3 файла :
// test1.php - содержит фу-ю func
// test2.php - содержит свою фую и использует из 1-го файла func()

// page2.php - подключается и test1.php и test2.php

// Но тут проблема: файл test1.php, подключается 2 раза:
// 1й раз в test2.php
// 2й раз напрямую в page2.php

// Это конфликт. Который решается фу-ей require_once
// Которая игнорирует повторные подключения других файлов.



/*** ЗАПИСЬ ПОДКЛЮЧЕНИЯ В ПЕРЕМЕННУЮ PHP 314/314 ✓ ***/

// Чтобы записать подключаемый файл в переменную
// Необходимо, чтобы он возвращал данные через return:

// test.php
// т.е перед любым значением в подкл. файле (перемен, фу-я, массив)
// должен быть return.
// return ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];


// page2.php
// только тогда оно запишется в переменную в основном файле:
// $week = require 'test.php';
// var_dump($week); // выведет массив


?>
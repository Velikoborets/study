<?php

/*** ВВЕДЕНИЕ В ПРОТОКОЛ HTTP 1/29 ✓ ***/

// HTTP протокол - правила, регулирющие общение клиента и сервера.



/*** ЗАПРОСЫ И ОТВЕТЫ В ПРОТОКОЛЕ HTTP 2/29 ***/

// Браузер - отпр. серверу запросы (request)
// Сервер - отпр. браузеру ответ (response)
// (При этом сервер, ничего никогда не пришлет, если нет запроса!)


// Взаимодействие браузера и сервера - это как игра в теннис
// Только, вместо мячика - сообщения (строки).
// (правила оформления сообщений и регулирует http)



/*** ОТСУТСТВИЕ СОСТОЯНИЯ В ПРОТОКОЛЕ HTTP 3/29 ***/

// Когда сервер обработал нашу стр, он забывает нас
// (у HTTP нет прямой возможности нас запомнить)

// Соотв. сервер не понимает, отправлены запросы
// Разными способами или одним.

// Важно!
// В реальной жизни, сайты запоминают нас,
// Это делается с помощью обходных путей.



/*** СТРУКТУРА HTTP СООБЩЕНИЙ HTTP 4/29 ***/

// 1. starting line - опр. тип сообщения 
// 2. headers - тело сообщения
// 3. message body - данные сообщения



/*** СТАРТОВАЯ СТРОКА HTTP ЗАПРОСА 5/29 ***/

// Пример (GET /page/test HTTP/1.1). Состоит из:
// 1. Метод - (GET-получение данных, POST-отправка данных)  
// 2. URI(d) (URL+URN) - URL(av.by), URN(/artic), URI(av.by/artic)
// 3. Версия протокола HTTP/1.1



/*** МЕТОДЫ HTTP ЗАПРОСОВ 6/29 ***/

// Есть много методов. В реале исп. только GET и POST



/*** СТАРТОВАЯ СТРОКА HTTP ОТВЕТА 7/29 ***/

// Пример (HTTP/1.1 404 Not Found). Состоит из:
// 1. Версия протокола HTTP/1.1
// 2. Состояние кода ("404") и его кратк. поясн ("not found")



/*** ГРУППЫ КОДОВ СОСТОЯНИЙ HTTP ОТВЕТА 8/29 ***/

// 1xx - процесс передачи данных.
// 2xx - успех.
// 3xx - запрос по другому URI.
// 4xx - ошибка по вине браузера.	
// 5xx - ошибка по вине сервера.



/*** HTTP ЗАГОЛОВКИ 9/29 ***/

// Заголовки нач. с нов. строки и  задают доп.парам-ры HTTP сообщ.

// Каждый заголовок состоит из имени и значения:
// Content-Type: text/html;charset=utf-8
// Content-Language: ru
// Last-Modified: Sat, 16 Jan 2020 21:16:42 GMT 



/*** ГРУППЫ HTTP ЗАГОЛОВКОВ 10/29 ***/

// 1. General Headers - общие(относятся ко всем кр. данных в теле)
// 2. Request Headers - запроса(браузер)
// 3. Response Headers - ответа(сервер)
// 4. Entity Headers - сущности(тело)



/*** ПОЛЕЗНЫЕ HTTP ЗАГОЛОВКИ 11/29 ***/

// ЗАПРОСА(БРАУЗЕР):
// Host: code.mu  - (вместе с URI-строкой, получается URL)


// ОТВЕТА(СЕРВЕР):
// Date: Wed, 21 Oct 2020 07:28:00 GMT -
// (момент времени создания HTTP сообщения)

// Last-Modified: Sat, 16 Jan 2020 21:16:42 GMT - 
// (серверт говорит, когда запр. ресурс был изменен)

// Content-Type: text/html; charset=utf-8 - (кодировка)

// Content-Language: ru - (язык)

// Content-Length: 10000 - (размер в байтах)




/*** СВОИ HTTP ЗАГОЛОВКИ 12/29 ***/

// Когда пишем свой заголовок добвавляем (Х-).
// Например X-Powered-By, 
// (указывает платформу где пашет сервак).



/*** ТЕЛО HTTP СООБЩЕНИЯ 13/29 ***/

// Тело идёт после заголовков.
// Может содержать: HTML,CSS,img(двоич) и.т.д.



/*** АВТОМАТИЧЕСКИЕ HTTP ЗАПРОСЫ БРАУЗЕРА 14/29 ***/

// Для каждого подключения: CSS-файла, img и.т.д.
// Формируется автоматически, свой отдельный HTTP-запрос.



/*** ЗАТРАТЫ НА HTTP ЗАПРОСЫ 15/29 ***/

// Каждый HTTP-запрос - отнимает время.  
// Поэтому все JS,CSS файлы объеденяют в 1 файл.
// Это делается с помощь Gulp и.т.д. 



/*** HTTP СООБЩЕНИЯ В ОТЛАДЧИКЕ БРАУЗЕРА 16/29 ***/

// Отладчик браузера = Инспектор элементов
// Во вкладке Network (сеть), все данные про http-запросы



/*** HTTP РЕДИРЕКТЫ 17/29 ***/

// redirect - смена направления/директории.

// Даём запрос браузеру перейти на page.html:
// GET /page.html HTTP/1.1

// А сервер перенаправляет на test.html (указали в коде)
// HTTP/1.1 301 OK 
/* адрес на который пререходим: */
// Location: /test.html



/*** ЗАГОЛОВОК ЗАПРОСА REFERER В ПРОТОКОЛЕ HTTP 18/29 ***/

/* Referrer (перевод) - тот, кто отсылает. */

// Если перейти с 1й стр, на др. 
// Referer будет содержать адрес(URL) 1й стр.

// Например:
// 1. Пусть мы находимся тут https://code.mu/ru/php/book
// 2. Зайдём во вкладку браузера "cеть", заголовки запроса:
// 3. Referrer: https://code.mu



/*** USER AGENT В ПРОТОКОЛЕ HTTP 19/29 ***/

// USER AGENT - прога, которая скачивает с сервака стр. сайта.
// (иногда это "гугл-робот")

// Сеть, заголовки запроса:
// User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:124.0) 
// Gecko/20100101 Firefox/124.0



/*** ПРОТОКОЛ HTTPS 20/29 ***/

// HTTPS - тот же http только,
// передаёт данные в зашифрованном виде.



/*** GET ПАРАМЕТРЫ В ПРОТОКОЛЕ HTTP 21/29 ***/

// В протоколе HTTP в URI сайта можно передавать GET параметрами.
// (мы уже фактически это делали в адр.строке).

// Пример передачи:
// GET /page/?param1=value1&m2=value2 HTTP/1.1



/*** ОТПРАВКА ФОРМ МЕТОДОМ GET В ПРОТОКОЛЕ HTTP 22/29 ***/

// В атрибуте action указ. URI, куда идет форма
// в method указ. метод отправки GET/POST

/** page2.php **
    <form action="/show.php/" method="GET">
        <input name="test1" value="1">
        <input name="test2" value="2">
        <input type="submit">
    </form>
*/

// После отправки будет выполнен след. запрос:
// GET /show.php/?test1=value1&test2=2 HTTP/1.1

// И в GET, во вкладке СЕТЬ (как и в адр.стр. так и В ОТЛАДЧИКЕ):
// http://study/show.php/?test1=1&test2=2



/*** ОТПРАВКА ФОРМ МЕТОДОМ POST В ПРОТОКОЛЕ HTTP 23/29 ***/

// Теперь отправим форму методом POST

/** page2.php **
    <form action="/show.php/" method="POST">
        <input name="test1" value="1">
        <input name="test2" value="2">
        <input type="submit">
    </form>
*/

// После отправки будет выполнен след. запрос:
// POST /page/ HTTP/1.1

// И в POST, только в отладчике, будет:
// http://study/show.php/?test1=1&test2=2



/*** MIME ТИПЫ В ПРОТОКОЛЕ HTTP 24/29 ***/

// Браузер будет правильно обрабатывать файлы.
// Если мы укажем их тип явно в http-протоколе. 
// Это и есть MIME - тип.

// СSS код:
// Content-Type: text/css

// HTML код:
// Content-Type: text/html

 // JavaScript код:
 // Content-Type: text/javascript  // и.т.д



/*** AJAX ЗАПРОСЫ В HTTP 25/29 ***/

// Технология AJAX позволяет загружать часть страницы с сервера,
// не перезагружая ее целиком, работает через JavaScript.

// Работает по событию:
// 1. Нажали на кнопку
// 2. Бразуер отпр. http - запрос на сервер
// 3. Запрашивая часть старницы в виде HTML-кода, либо JSON.
// 4. Сервер пришлёт ответ
// 5. Браузер отобразит данные в новом заданном блоке.
// *  AJAX-запросы, отображаются в fetch/xhr.


/*** COOKIE В HTTP 26/29 ***/

// Куки передаются между клиентом и сервером 
// с помощью HTTP-заголовков.
// И позволяют сохранять данные
// В браузере пользователя, чтобы идентифитировать его.

// При каждом запросе барузера на сервак 
// с пом заголовка- "Cookie"
// Браузер будет отпр. куки текущ. сайта на сервер

// Если кука не одна, то клиент отправит их всех в 1 заголовке:
// Cookie: name=john;surn:smit

// Установка сервером куки с нужным именем и значением:
// Set-Cookie: name=john



/*** СЕССИЯ В HTTP 27/29 ***/

// На основе кук работают сессии. 
// Сессии позволяют серверу запоминать клиента 
// И хранить для него информацию. 

// Например:
// Когда пользователь кладёт товары в корзину и она всё сохр.

// Как это работает? Если http не запоминает юзеров?
// "Обходной путь":
// 1. При первом обр. клиента, сервер уст. куку со случ. стр.
// 2. Эта кука наз. сессионой и имеет имя sessid.
// 3. Сервер хранит у себя список всех сессионных кук
// 4. И привязывает к ним нужные данные(список товаров).

// * Когда клиент обр. ещё раз, сервер, уже знаего его id
// * По сессионной куке, и поттягивает его данные.



/*** API ЧЕРЕЗ HTTP 28/29 ***/

// API - набор URL, к которым можно обращаться для получ. данных.
// (курсы валют, погода итд)



/*** REST API В ПРОТОКОЛЕ HTTP 29/29 ***/  

// REST API (RESTful) - условный стандарт API.
// (как GET и POST в методах).

// Его суть - исп. методов протокола http

// В REST API 
// используя метод GET - получаются данные,  
// метод POST - создаются, метод - PUT изменяются, 
// метод DELETE - удаляются. 

// Пример(помним, что API, работает с url):
// Создаём - POST http://api.loc/user/
// Получаем - GET http://api.loc/user/1/
// Изменяем PUT http://api.loc/user/1/


?>
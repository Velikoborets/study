<?php



/******* "ПРОДВИНУТЫЕ" SQL-ЗАПРОСЫ 338/338  *******/

// IN, MIN, MAX, GROUP BY, CONCAT, 




/******* SQL-ЗАПРОС IN  *******/

// * Напоминаю, что мы раньше искали много значений так:
// SELECT * FROM people WHERE id=1 OR id=2 OR id=3;

// IN гораздо удобнее использ. когда надо выбрать несколько значений:

// Прим.1
// Выбрать все записи, где id = 1,2,3:
// SELECT * FROM people WHERE id IN (1,2,3);

// Прим.2
// Выбрать все записи, где имена "Luna", "Ivan":
// SELECT * FROM people WHERE name IN ('Luna', 'Ivan');



/******* SQL-ЗАПРОСЫ MIN,MAX  *******/

// Запросы MIN,MAX - выводят минимальное или максимальное значение
// Среди указанных строк.

// Прим.1
// Вывести минимальное id
// SELECT MIN(id) FROM people;

// Прим.2
// Вывести максимальную зарплату
// SELECT MAX(salary) FROM people;

// Прим.3
// Вывести максимал. з\п, где id<2
// SELECT MIN(salary) FROM people WHERE id>=2;

// Прим.4
// Найти макс. и мин. зн. з\п одновременно
// SELECT MAX(salary), MIN(salary) FROM people;
// (Для красоты можем переименовать:)
// SELECT MAX(salary) as max, MIN(salary) as min FROM people;



/******* SQL-ЗАПРОС GROUP BY  *******/

// GROUP BY - делает группы из значений, которые задаём.
// (Если конкретные группы, не заданы, то гр-ет одинаковые знач.)

// Пример1.
// SELECT age, SUM(salary) FROM people GROUP BY age;
/* Получается, мы  отыскиваем одинаковые "age"
   И складываем сумму их з\п */
  
// Пример2.
// Теперь зададим диапазон для проверки значений
// Сгрупируем (найдем одинаковый возраст) и сложим их з\п
// SELECT age, SUM(salary) FROM people WHERE id < 5 GROUP BY age;


// Пример3.
// Теперь сгруппируем по возрасту и выведем того из группы
// У кого MAX з\п (остальные выведутся потому, что без группы)
// (Аналогично всё работает с миниальной з\п):
// SELECT age, MAX(salary) FROM people GROUP BY age;


// Пример 4.
// Теперь с помощью COUNT(*) найдем количество записей в группах
// (у нас только в группе 23 лет -2чел, в остальных по 1-му).
// SELECT age, COUNT(*) FROM people GROUP BY age;



/******* SQL-фу-я CONCAT *******/

// CONCAT - создаёт новый столбец с сконкатенироваными значениями:
// SELECT CONCAT(поле1, поле2...) FROM имя_таблицы WHERE условие 

// Пример 1 
// Создадим новый столбец "concat" в котором при выборке будет
// Данные всех записей, но они уже в рез-тате будут объеденены
// SELECT *, CONCAT(age, name, salary) as concat FROM people 
/*
+----+--------+-----+--------+---------------------------+
| id | name   | age | salary | CONCAT(age, name, salary) |
+----+--------+-----+--------+---------------------------+
|  1 | Jack   |  23 |   2000 | 23Jack2000                |
----------------------------------------------------------
*/

// Пример 2
// Добавим после name, 3 воскл. знака:
// SELECT *, CONCAT(name, '!!!') FROM people;
/*
+----+--------+-----+--------+---------------------+
| id | name   | age | salary | CONCAT(name, '!!!') |
+----+--------+-----+--------+---------------------+
|  1 | Jack   |  23 |   2000 | Jack!!!             |
----------------------------------------------------
*/

// Пример 3
// Добавим полю "name" 3 воскл. знака, а после него 3 ???
// SELECT *, CONCAT('???', name, '!!!') FROM people;
/*
+----+--------+-----+--------+---------------------+
| id | name   | age | salary | CONCAT(name, '!!!') |
+----+--------+-----+--------+---------------------+
|  1 | Jack   |  23 |   2000 | ???Jack!!!          |
----------------------------------------------------
 */

?>

